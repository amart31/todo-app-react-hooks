{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","Container","Navbar","className","NavbarBrand","href","Task","_ref","task","index","completeTask","removeTask","style","textDecoration","completed","title","background","onClick","CreateTask","_ref2","addTask","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","Todo","_useState3","_useState4","tasksRemaining","setTasksRemaining","_useState5","_useState6","tasks","setTasks","useEffect","filter","length","newTasks","toConsumableArray","splice","map","key","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.185a5433.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport {  \n    Container,\n    Navbar,\n    NavbarBrand } from 'reactstrap';\n\nfunction NavBar() {\n    return (\n        <Container>\n\n            <Navbar className=\"nav\">\n            <NavbarBrand href=\"/\">To-Do App</NavbarBrand>\n            </Navbar>\n        </Container>\n    );\n}\n\nfunction Task({ task, index, completeTask, removeTask }) {\n    return (\n        <Container\n            className=\"task\"\n            style={{textDecoration: task.completed ? \"line-through\" : \" \"}}\n            >\n            {task.title}\n            <button style={{background: \"red\" }} onClick={() => removeTask(index)}>X</button>\n            <button onClick={() => completeTask(index)}>Complete</button>\n            </Container>\n    );\n}\n\nfunction CreateTask({ addTask}) {\n    const [value, setValue] = useState(\"\");\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if(!value) return;\n\n        addTask(value);\n        setValue(\"\");\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input  \n                type=\"text\"\n                className=\"input\"\n                value={value}\n                placeholder=\"Add a new task\"\n                onChange={e => setValue(e.target.value)}\n                />\n        </form>\n    );\n}\n\nfunction Todo() {\n    const [tasksRemaining, setTasksRemaining] = useState(0);\n    const [tasks, setTasks] = useState([\n        \n        {\n            title: \"Code, code, code\",\n            completed: false\n        }\n    ]);\n\n\n    useEffect(() => { setTasksRemaining(tasks.filter(task => !task.completed).length) });\n\n    const addTask = title => {\n        const newTasks = [...tasks, {title, completed: false}];\n        setTasks(newTasks);\n    };\n\n    const completeTask = index => {\n        const newTasks = [...tasks];\n        newTasks[index].completed = true;\n        setTasks(newTasks);\n    };\n\n    const removeTask = index => {\n        const newTasks = [...tasks];\n        newTasks.splice(index, 1);\n        setTasks(newTasks);\n    };\n\n    return (\n        <Container>\n        <NavBar />\n        <Container className=\"todo-container\">\n        <Container className=\"header\">Pending tasks ({tasksRemaining})</Container>\n        <Container className=\"tasks\">\n            {tasks.map((task, index) => (\n                <Task\n                    task={task}\n                    index={index}\n                    completeTask={completeTask}\n                    removeTask={removeTask}\n                    key={index}\n                    />\n            ))}\n        </Container>\n                <Container className=\"create-task\" >\n                    <CreateTask addTask={addTask} />\n                </Container>\n        </Container>\n        </Container>\n    );\n}\n\nexport default Todo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}